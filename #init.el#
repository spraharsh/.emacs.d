;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; MELPA ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'package)
;; (add-to-list 'package-archives
;;              '("melpa" . "https://melpa.org/packages/") t)
;; (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)

(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
;; (package-initialize) this is probably a bad idea 
;;;; custom elpy files
(add-to-list 'load-path
             "~/.emacs.d/plugins")

(add-to-list 'load-path
             "/usr/local/share/emacs/site-lisp/rtags")


;; (use-package company-tabnine :ensure t)




;; change garbage collection defaults
(setq gc-cons-threshold 100000000)
(add-hook 'after-init-hook (lambda () (setq gc-cons-threshold 100000000)))

;; process output speed
(setq read-process-output-max (* 1024 1024))


;; (add-to-list 'default-frame-alist
;;              '(font . "Fira Code-12"))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; End MELPA ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;; arxiv-mode





(use-package lsp-mode
  :hook (((c-mode c++-mode) . lsp)
         (lsp-mode . yas-minor-mode))
  :custom-face
  (lsp-modeline-code-actions-face ((t (:inherit mode-line))))
  :custom
  (lsp-enable-links nil)
  (lsp-keymap-prefix "C-c l")
  (lsp-enable-indentation nil)
  (lsp-enable-symbol-highlighting nil)
  :config
  (setq lsp-clients-clangd-executable "/usr/bin/clangd-11")
  (setq lsp-clients-clangd-args '("-j=6" "-background-index" "-log=error"))
  )



(setq lsp-completion-provider :none)

(add-hook 'c++-mode-hook
          (lambda ()
            (set (make-local-variable 'company-backends) '((company-capf)))
            )
          )


(add-hook 'LaTeX-mode-hook
          (lambda ()
            (set (make-local-variable 'company-backends) '(
                                                           (company-dabbrev
                                                            company-abbrev
                                                            company-math-symbols-latex
                                                            company-yasnippet
                                                            company-capf)
                                                           ))))



(add-hook 'after-init-hook 'global-company-mode)
;; (defun lsp-set-cfg ()
;;   (let ((lsp-cfg `(:pyls (:configurationSources ("flake8")))))
;;     ;; TODO: check lsp--cur-workspace here to decide per server / project
;;     (lsp--set-configuration lsp-cfg)))

;; (add-hook 'lsp-after-initialize-hook 'lsp-set-cfg)

