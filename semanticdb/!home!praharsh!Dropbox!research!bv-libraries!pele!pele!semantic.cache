;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
    (semanticdb-project-database-file "semanticdb-project-database-file"
      :tables
      (list
        (semanticdb-table "semanticdb-table"
          :major-mode python-mode
          :tags 
        '( ("unittest" include nil nil [1 16])
            ("numpy" include nil nil [17 38])
            ("pele.basinhopping" include nil nil [40 82])
            ("pele.systems" include nil nil [83 117])
            ("TestBasinhopping" type
               (:superclasses ("unittest.TestCase")
                :members 
                  ( ("setUp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [176 180]))                          )
                        (reparse-symbol indented_block_body) [166 313])
                    ("assertEnergy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [339 343])
                            ("e" variable nil (reparse-symbol function_parameters) [345 346]))                          )
                        (reparse-symbol indented_block_body) [322 422])
                    ("test_create_basinhopping" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [460 464]))                          )
                        (reparse-symbol indented_block_body) [431 625])
                    ("test_takestep" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [648 652]))                          )
                        (reparse-symbol indented_block_body) [630 889]))                  
                :type "class")
                nil [119 889])
            ("if" code nil nil [907 953]))          
          :file "test_basinhopping.py"
          :pointmax 953
          :fsize 952
          :lastmodtime '(24096 56860 519089 901000)
          :unmatched-syntax nil)
        (semanticdb-table "semanticdb-table"
          :major-mode python-mode
          :tags 
        '( ("__future__" include nil nil [30 68])
            ("builtins" include nil nil [69 93])
            ("builtins" include nil nil [94 120])
            ("builtins" include nil nil [121 148])
            ("sys" include nil nil [149 159])
            ("metropolis" include nil nil [179 210])
            ("copy" include nil nil [211 222])
            ("numpy" include nil nil [223 241])
            ("pele.optimize" include nil nil [242 274])
            ("MonteCarlo" type
               (:documentation "A class to run the Monte Carlo algorithm

    Parameters
    ----------
    coords : numpy array, one dimensional
        The initial set of coordinates.
    potential : potential object
        A class implementing the potential.  The class must have the
        following functions implemented::
    
            potential.getEnergy(coords)
            potential.getEnergyGradient(coords)
    
    takeStep : object
        The class which randomly perterbs the system, e.g. random
        displacement.  It must have two functions implemented which
        are called like::
    
            takeStep.takeStep(coords, driver=self)       #  takes the step
            takeStep.updateStep(acceptstep, driver=self) #  for adaptive step size management
    
    acceptTest : callable, optional
        Acceptance criterion for monte carlo move.  If None is given, metropolis is used.
        It must have the form::

            bool = acceptTest(Eold, Enew, old_coords, new_coords)
        
    confCheck : list of callables, optional
        list of checks if current configuration is valid. This is executed before acceptTest
        and accepTest is only called if all checks return True.  The checks are called like::
        
            check(trial_energy, trial_coords, driver=self)
        
        and must return a bool
    
    temperature : float, optional
        The temperature used in the metropolis criterion.  
    event_after_step :  list of callables, optional
        these are called just after each monte carlo
        round.  Each event in the list takes the form:::
    
            event(energy, coords, acceptstep)
    
    outstream : open file object, optional
        The file stream to print quench information to.  None for no printing.
        Default to standard out.
    store_initial : bool, optional
        if True store initial structure
    
    See Also
    --------
    pele.potentials, pele.takestep, pele.storage, pele.accept_tests
    "
                :superclasses ("object")
                :members 
                  ( ("insert_rejected" variable nil (reparse-symbol indented_block_body) [2303 2326])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [2642 2679])
                            ("if" code nil (reparse-symbol indented_block_body) [2687 2738])
                            ("self" variable nil (reparse-symbol indented_block_body) [2746 2775])
                            ("self" variable nil (reparse-symbol indented_block_body) [2784 2806])
                            ("self" variable nil (reparse-symbol indented_block_body) [2815 2841])
                            ("self" variable nil (reparse-symbol indented_block_body) [2850 2874])
                            ("self" variable nil (reparse-symbol indented_block_body) [2883 2934])
                            ("self" variable nil (reparse-symbol indented_block_body) [2958 2988])
                            ("self" variable nil (reparse-symbol indented_block_body) [2997 3015])
                            ("self" variable nil (reparse-symbol indented_block_body) [3025 3047])
                            ("self" variable nil (reparse-symbol indented_block_body) [3056 3076])
                            ("self" variable nil (reparse-symbol indented_block_body) [3094 3120])
                            ("self" variable nil (reparse-symbol indented_block_body) [3129 3151])
                            ("self" variable nil (reparse-symbol indented_block_body) [3198 3224])
                            ("if" code nil (reparse-symbol indented_block_body) [3238 3379])
                            ("self" variable nil (reparse-symbol indented_block_body) [3396 3412])
                            ("energy" variable nil (reparse-symbol indented_block_body) [3623 3669])
                            ("self" variable nil (reparse-symbol indented_block_body) [3678 3699])
                            ("if" code nil (reparse-symbol indented_block_body) [3708 3789])
                            ("self" variable nil (reparse-symbol indented_block_body) [3808 3829])
                            ("self" variable nil (reparse-symbol indented_block_body) [3847 3880])
                            ("self" variable nil (reparse-symbol indented_block_body) [3889 3928]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2347 2351])
                            ("coords" variable nil (reparse-symbol function_parameters) [2353 2359])
                            ("potential" variable nil (reparse-symbol function_parameters) [2361 2370])
                            ("takeStep" variable nil (reparse-symbol function_parameters) [2372 2380])
                            ("storage" variable nil (reparse-symbol function_parameters) [2382 2389])
                            ("event_after_step" variable nil (reparse-symbol function_parameters) [2396 2412])
                            ("acceptTest" variable nil (reparse-symbol function_parameters) [2419 2429])
                            ("temperature" variable nil (reparse-symbol function_parameters) [2453 2464])
                            ("confCheck" variable nil (reparse-symbol function_parameters) [2470 2479])
                            ("outstream" variable nil (reparse-symbol function_parameters) [2486 2495])
                            ("store_initial" variable nil (reparse-symbol function_parameters) [2508 2521])
                            ("iprint" variable nil (reparse-symbol function_parameters) [2528 2534]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2334 3929])
                    ("setPrinting" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3955 3959])
                            ("ostream" variable nil (reparse-symbol function_parameters) [3961 3968])
                            ("frq" variable nil (reparse-symbol function_parameters) [3980 3983]))                          
                        :documentation "change how the printing is done
        
        Parameters
        -----------
        ostream : open file or None
            where to print data
        frq : int or None
            how often to print data.  if None, don't change current value
            
        ")
                        (reparse-symbol indented_block_body) [3939 4437])
                    ("addEventAfterStep" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4468 4472])
                            ("event" variable nil (reparse-symbol function_parameters) [4474 4479]))                          
                        :documentation "add an even to the list event_after_step ")
                        (reparse-symbol indented_block_body) [4446 4584])
                    ("_mcStep" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4618 4622]))                          
                        :documentation "take one monte carlo basin hopping step
        ")
                        (reparse-symbol indented_block_body) [4606 6626])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6641 6645])
                            ("nsteps" variable nil (reparse-symbol function_parameters) [6647 6653]))                          
                        :documentation "do multiple iterations")
                        (reparse-symbol indented_block_body) [6633 6782])
                    ("takeOneStep" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6807 6811]))                          
                        :documentation "one cycle of the routine
        ")
                        (reparse-symbol indented_block_body) [6791 7586])
                    ("printStep" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7605 7609]))                          )
                        (reparse-symbol indented_block_body) [7591 7902]))                  
                :type "class")
                nil [277 7902])
            ("if" code nil nil [7905 8193]))          
          :file "mc.py"
          :pointmax 8194
          :fsize 8193
          :lastmodtime '(24103 25612 211010 830000)
          :unmatched-syntax '((FROM 160 . 164) (PERIOD 165 . 166)))
        (semanticdb-table "semanticdb-table"
          :major-mode python-mode
          :tags 
        '( ("builtins" include nil nil [30 54])
            ("sys" include nil nil [55 65])
            ("pele.mc" include nil nil [66 96])
            ("pele.optimize" include nil nil [97 130])
            ("BasinHopping" type
               (:documentation "
    A class to run the basin hopping algorithm

    Parameters
    ----------
    All required and optional parameters from base class MonteCarlo :
    quench : callable, optional
        Use this quencher as default
    insert_rejected : bool
        insert the rejected structure into the storage class
    
    Notes
    -----
    Basin-hopping is a stochastic algorithm which attempts to find the global
    minimum of a smooth scalar function of one or more variables

    The algorithm is iterative with each cycle composed of the following
    features

    1) random perturbation of the coordinates

    2) local minimization

    3) accept or reject the new coordinates based on the minimized function
       value

    The acceptance test used here is the Metropolis criterion of standard Monte
    Carlo algorithms, although there are many other possibilities [3]_.

    This global minimization method has been shown to be extremely efficient
    for a wide variety of problems in physics and chemistry.  It is
    particularly useful when the function has many minima separated by large
    barriers. See the Cambridge Cluster Database
    http://www-wales.ch.cam.ac.uk/CCD.html for databases of molecular systems
    that have been optimized primarily using basin-hopping.  This database
    includes minimization problems exceeding 300 degrees of freedom.
    
    See Also
    --------
    pele.mc.MonteCarlo : base class
    pele.potentials, pele.takestep, pele.storage, pele.accept_tests


    "
                :superclasses ("MonteCarlo")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("MonteCarlo" code nil (reparse-symbol indented_block_body) [2119 2448])
                            ("if" code nil (reparse-symbol indented_block_body) [2458 2546])
                            ("self" variable nil (reparse-symbol indented_block_body) [2554 2574])
                            ("self" variable nil (reparse-symbol indented_block_body) [2792 2823])
                            ("res" variable nil (reparse-symbol indented_block_body) [2832 2862])
                            ("self" variable nil (reparse-symbol indented_block_body) [2871 2899])
                            ("self" variable nil (reparse-symbol indented_block_body) [2909 2933])
                            ("self" variable nil (reparse-symbol indented_block_body) [2942 2967])
                            ("self" variable nil (reparse-symbol indented_block_body) [2976 2994])
                            ("self" variable nil (reparse-symbol indented_block_body) [3003 3027])
                            ("self" variable nil (reparse-symbol indented_block_body) [3037 3075])
                            ("if" code nil (reparse-symbol indented_block_body) [3093 3162])
                            ("self" variable nil (reparse-symbol indented_block_body) [3214 3236])
                            ("self" variable nil (reparse-symbol indented_block_body) [3245 3277])
                            ("self" code nil (reparse-symbol indented_block_body) [3286 3302])
                            ("self" variable nil (reparse-symbol indented_block_body) [3320 3353])
                            ("self" variable nil (reparse-symbol indented_block_body) [3362 3401]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1706 1710])
                            ("coords" variable nil (reparse-symbol function_parameters) [1712 1718])
                            ("potential" variable nil (reparse-symbol function_parameters) [1720 1729])
                            ("takeStep" variable nil (reparse-symbol function_parameters) [1731 1739])
                            ("storage" variable nil (reparse-symbol function_parameters) [1741 1748])
                            ("event_after_step" variable nil (reparse-symbol function_parameters) [1755 1771])
                            ("acceptTest" variable nil (reparse-symbol function_parameters) [1778 1788])
                            ("temperature" variable nil (reparse-symbol function_parameters) [1812 1823])
                            ("quench" variable nil (reparse-symbol function_parameters) [1829 1835])
                            ("confCheck" variable nil (reparse-symbol function_parameters) [1842 1851])
                            ("outstream" variable nil (reparse-symbol function_parameters) [1858 1867])
                            ("insert_rejected" variable nil (reparse-symbol function_parameters) [1880 1895]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1693 3402])
                    ("_mcStep" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3420 3424]))                          
                        :documentation "
        take one monte carlo basin hopping step

        overload the MonteCarlo base class step
        ")
                        (reparse-symbol indented_block_body) [3408 5660])
                    ("printStep" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5680 5684]))                          )
                        (reparse-symbol indented_block_body) [5666 6177])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6203 6207]))                          )
                        (reparse-symbol indented_block_body) [6186 6330])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6356 6360])
                            ("dct" variable nil (reparse-symbol function_parameters) [6362 6365]))                          )
                        (reparse-symbol indented_block_body) [6339 6438]))                  
                :type "class")
                nil [132 6438])
            ("if" code nil nil [6440 6598]))          
          :file "basinhopping.py"
          :pointmax 6599
          :fsize 6598
          :lastmodtime '(24103 22530 423725 309000)
          :unmatched-syntax nil))
      :file "!home!praharsh!Dropbox!research!bv-libraries!pele!pele!semantic.cache"
      :semantic-tag-version "2.0"
      :semanticdb-version "2.2")